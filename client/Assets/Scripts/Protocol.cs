// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wcm90b2NvbC5wcm90bxIIcHJvdG9jb2wiKwoJQnVmZlN0YXRlEgwKBG5h",
            "bWUYASABKAkSEAoIZHVyYXRpb24YAiABKAUiRQoJQ2FyZFN0YXRlEgwKBG5h",
            "bWUYASABKAkSFAoMY29zdF9vZmZlbnNlGAIgASgFEhQKDGNvc3RfZGVmZW5z",
            "ZRgDIAEoBSKaAwoLRW50aXR5U3RhdGUSCgoCaWQYASABKAUSDAoEbmFtZRgC",
            "IAEoCRIcCgRzaWRlGAMgASgOMg4ucHJvdG9jb2wuU2lkZRIKCgJocBgEIAEo",
            "BRIOCgZlbmVyZ3kYBSABKAUSEgoKbWF4X2VuZXJneRgGIAEoBRITCgtlbmVy",
            "Z3lfZ2FpbhgHIAEoBRINCgVtdXRlZBgIIAEoCBINCgVhcm1lZBgJIAEoCBIO",
            "CgZsb2NrZWQYCiABKAgSEgoKZGFtYWdlX21vZBgLIAEoBRIQCghidWZmYWJs",
            "ZRgMIAEoCBIRCglpc19wbGF5ZXIYDSABKAgSEAoIcG9zaXRpb24YDiABKAUS",
            "IgoFYnVmZnMYDyADKAsyEy5wcm90b2NvbC5CdWZmU3RhdGUSEwoLd2VhcG9u",
            "X25hbWUYECABKAkSEQoJc2hpcF9uYW1lGBEgASgJEhIKCmhhbmRfY2FyZHMY",
            "EiABKAUSEgoKZGVja19jYXJkcxgTIAEoBRIhCgRoYW5kGBQgAygLMhMucHJv",
            "dG9jb2wuQ2FyZFN0YXRlIl0KCUdhbWVTdGF0ZRIKCgJpZBgBIAEoCRIcCgR0",
            "dXJuGAIgASgOMg4ucHJvdG9jb2wuU2lkZRImCgdvYmplY3RzGAMgAygLMhUu",
            "cHJvdG9jb2wuRW50aXR5U3RhdGUiQgoKR2FtZUFjdGlvbhImCgZhY3Rpb24Y",
            "ASABKA4yFi5wcm90b2NvbC5QbGF5ZXJBY3Rpb24SDAoEY2FyZBgCIAEoCSIw",
            "ChJHYW1lRWZmZWN0QXJndW1lbnQSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIg",
            "ASgJIqYBCgpHYW1lRWZmZWN0EhUKDXNvdXJjZV9lbnRpdHkYASABKAUSFQoN",
            "dGFyZ2V0X2VudGl0eRgCIAEoBRIkCgZhY3Rpb24YAyABKAsyFC5wcm90b2Nv",
            "bC5HYW1lQWN0aW9uEhMKC2VmZmVjdF9uYW1lGAQgASgJEi8KCWFyZ3VtZW50",
            "cxgFIAMoCzIcLnByb3RvY29sLkdhbWVFZmZlY3RBcmd1bWVudCIsCghTcnZI",
            "ZWxsbxIPCgd2ZXJzaW9uGAEgASgJEg8KB3BsYXllcnMYAiABKAUiMwoTQ2xp",
            "UXVldWVQcmVmZXJlbmNlcxIMCgRzaGlwGAEgASgJEg4KBndlYXBvbhgCIAEo",
            "CSJEChNTcnZRdWV1ZUdhbWVDcmVhdGVkEg8KB2dhbWVfaWQYASABKAkSHAoE",
            "c2lkZRgCIAEoDjIOLnByb3RvY29sLlNpZGUi1AEKDlNydkdhbWVNZXNzYWdl",
            "Eg8KB2dhbWVfaWQYASABKAkSIgoFc3RhdGUYAiABKAsyEy5wcm90b2NvbC5H",
            "YW1lU3RhdGUSJgoGYWN0aW9uGAQgASgLMhQucHJvdG9jb2wuR2FtZUFjdGlv",
            "bkgAEiYKBmVmZmVjdBgFIAEoCzIULnByb3RvY29sLkdhbWVFZmZlY3RIABIP",
            "CgVlcnJvchgHIAEoCUgAEiEKCXlvdXJfc2lkZRgGIAEoDjIOLnByb3RvY29s",
            "LlNpZGVCCQoHcGF5bG9hZCI0CgxTcnZHYW1lRW5kZWQSDwoHZ2FtZV9pZBgB",
            "IAEoCRITCgtpbnRlcnJ1cHRlZBgCIAEoCCIzCg1TcnZQbGF5ZXJMZWZ0Eg8K",
            "B2dhbWVfaWQYASABKAkSEQoJcGxheWVyX2lkGAIgASgFIowDCgdNZXNzYWdl",
            "EiAKBmRvbWFpbhgBIAEoDjIQLnByb3RvY29sLkRvbWFpbhIcCgRoZWFkGAIg",
            "ASgOMg4ucHJvdG9jb2wuSGVhZBIOCgZzdGF0dXMYAyABKAkSDwoFZXJyb3IY",
            "BCABKAlIABIjCgVoZWxsbxgFIAEoCzISLnByb3RvY29sLlNydkhlbGxvSAAS",
            "NQoMZ2FtZV9jcmVhdGVkGAYgASgLMh0ucHJvdG9jb2wuU3J2UXVldWVHYW1l",
            "Q3JlYXRlZEgAEiwKCmdhbWVfZW5kZWQYCCABKAsyFi5wcm90b2NvbC5TcnZH",
            "YW1lRW5kZWRIABIoCgRnYW1lGAkgASgLMhgucHJvdG9jb2wuU3J2R2FtZU1l",
            "c3NhZ2VIABI0CgtxdWV1ZV9wcmVmcxgKIAEoCzIdLnByb3RvY29sLkNsaVF1",
            "ZXVlUHJlZmVyZW5jZXNIABIuCgtwbGF5ZXJfbGVmdBgLIAEoCzIXLnByb3Rv",
            "Y29sLlNydlBsYXllckxlZnRIAEIGCgRib2R5Kh0KBkRvbWFpbhIJCgVMT0JC",
            "WRAAEggKBEdBTUUQASrBAgoESGVhZBINCglTUlZfSEVMTE8QABINCglTUlZf",
            "RVJST1IQARISCg5TUlZfR0FNRV9FUlJPUhAOEhUKEVNSVl9RVUVVRV9TVEFS",
            "VEVEEAISFQoRU1JWX1FVRVVFX1NUT1BQRUQQAxIaChZTUlZfUVVFVUVfR0FN",
            "RV9DUkVBVEVEEAQSFAoQU1JWX0dBTUVfU1RBUlRFRBAFEhIKDlNSVl9HQU1F",
            "X0VOREVEEAYSGAoUU1JWX0dBTUVfUExBWUVSX0xFRlQQBxIRCg1TUlZfR0FN",
            "RV9UVVJOEAgSEwoPU1JWX0dBTUVfQUNUSU9OEAkSEwoPU1JWX0dBTUVfRUZG",
            "RUNUEAoSEwoPQ0xJX1FVRVVFX1NUQVJUEAsSEgoOQ0xJX1FVRVVFX1NUT1AQ",
            "DBITCg9DTElfR0FNRV9BQ1RJT04QDSohCgRTaWRlEgsKB05FVVRSQUwQABIF",
            "CgFBEAESBQoBQhACKlEKDFBsYXllckFjdGlvbhINCglQTEFZX0NBUkQQABIP",
            "CgtGSVJFX1dFQVBPThABEgwKCEVORF9UVVJOEAISEwoPQ0hFQVRfR0FJTl9D",
            "QVJEEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Protocol.Domain), typeof(global::Protocol.Head), typeof(global::Protocol.Side), typeof(global::Protocol.PlayerAction), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BuffState), global::Protocol.BuffState.Parser, new[]{ "Name", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CardState), global::Protocol.CardState.Parser, new[]{ "Name", "CostOffense", "CostDefense" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.EntityState), global::Protocol.EntityState.Parser, new[]{ "Id", "Name", "Side", "Hp", "Energy", "MaxEnergy", "EnergyGain", "Muted", "Armed", "Locked", "DamageMod", "Buffable", "IsPlayer", "Position", "Buffs", "WeaponName", "ShipName", "HandCards", "DeckCards", "Hand" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GameState), global::Protocol.GameState.Parser, new[]{ "Id", "Turn", "Objects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GameAction), global::Protocol.GameAction.Parser, new[]{ "Action", "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GameEffectArgument), global::Protocol.GameEffectArgument.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GameEffect), global::Protocol.GameEffect.Parser, new[]{ "SourceEntity", "TargetEntity", "Action", "EffectName", "Arguments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SrvHello), global::Protocol.SrvHello.Parser, new[]{ "Version", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CliQueuePreferences), global::Protocol.CliQueuePreferences.Parser, new[]{ "Ship", "Weapon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SrvQueueGameCreated), global::Protocol.SrvQueueGameCreated.Parser, new[]{ "GameId", "Side" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SrvGameMessage), global::Protocol.SrvGameMessage.Parser, new[]{ "GameId", "State", "Action", "Effect", "Error", "YourSide" }, new[]{ "Payload" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SrvGameEnded), global::Protocol.SrvGameEnded.Parser, new[]{ "GameId", "Interrupted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SrvPlayerLeft), global::Protocol.SrvPlayerLeft.Parser, new[]{ "GameId", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message), global::Protocol.Message.Parser, new[]{ "Domain", "Head", "Status", "Error", "Hello", "GameCreated", "GameEnded", "Game", "QueuePrefs", "PlayerLeft" }, new[]{ "Body" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Domain {
    [pbr::OriginalName("LOBBY")] Lobby = 0,
    [pbr::OriginalName("GAME")] Game = 1,
  }

  public enum Head {
    /// <summary>
    /// [SERVER] Base server messages
    /// </summary>
    [pbr::OriginalName("SRV_HELLO")] SrvHello = 0,
    [pbr::OriginalName("SRV_ERROR")] SrvError = 1,
    [pbr::OriginalName("SRV_GAME_ERROR")] SrvGameError = 14,
    /// <summary>
    /// [SERVER] Queue message
    /// </summary>
    [pbr::OriginalName("SRV_QUEUE_STARTED")] SrvQueueStarted = 2,
    [pbr::OriginalName("SRV_QUEUE_STOPPED")] SrvQueueStopped = 3,
    [pbr::OriginalName("SRV_QUEUE_GAME_CREATED")] SrvQueueGameCreated = 4,
    /// <summary>
    /// [SERVER] Game messages
    /// </summary>
    [pbr::OriginalName("SRV_GAME_STARTED")] SrvGameStarted = 5,
    [pbr::OriginalName("SRV_GAME_ENDED")] SrvGameEnded = 6,
    [pbr::OriginalName("SRV_GAME_PLAYER_LEFT")] SrvGamePlayerLeft = 7,
    [pbr::OriginalName("SRV_GAME_TURN")] SrvGameTurn = 8,
    /// <summary>
    ///  redirect player action
    /// </summary>
    [pbr::OriginalName("SRV_GAME_ACTION")] SrvGameAction = 9,
    [pbr::OriginalName("SRV_GAME_EFFECT")] SrvGameEffect = 10,
    /// <summary>
    /// [CLIENT] Messages
    /// </summary>
    [pbr::OriginalName("CLI_QUEUE_START")] CliQueueStart = 11,
    [pbr::OriginalName("CLI_QUEUE_STOP")] CliQueueStop = 12,
    [pbr::OriginalName("CLI_GAME_ACTION")] CliGameAction = 13,
  }

  public enum Side {
    [pbr::OriginalName("NEUTRAL")] Neutral = 0,
    [pbr::OriginalName("A")] A = 1,
    [pbr::OriginalName("B")] B = 2,
  }

  public enum PlayerAction {
    [pbr::OriginalName("PLAY_CARD")] PlayCard = 0,
    [pbr::OriginalName("FIRE_WEAPON")] FireWeapon = 1,
    [pbr::OriginalName("END_TURN")] EndTurn = 2,
    [pbr::OriginalName("CHEAT_GAIN_CARD")] CheatGainCard = 3,
  }

  #endregion

  #region Messages
  public sealed partial class BuffState : pb::IMessage<BuffState> {
    private static readonly pb::MessageParser<BuffState> _parser = new pb::MessageParser<BuffState>(() => new BuffState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffState(BuffState other) : this() {
      name_ = other.name_;
      duration_ = other.duration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffState Clone() {
      return new BuffState(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Duration != other.Duration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffState other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardState : pb::IMessage<CardState> {
    private static readonly pb::MessageParser<CardState> _parser = new pb::MessageParser<CardState>(() => new CardState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardState(CardState other) : this() {
      name_ = other.name_;
      costOffense_ = other.costOffense_;
      costDefense_ = other.costDefense_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardState Clone() {
      return new CardState(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cost_offense" field.</summary>
    public const int CostOffenseFieldNumber = 2;
    private int costOffense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostOffense {
      get { return costOffense_; }
      set {
        costOffense_ = value;
      }
    }

    /// <summary>Field number for the "cost_defense" field.</summary>
    public const int CostDefenseFieldNumber = 3;
    private int costDefense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostDefense {
      get { return costDefense_; }
      set {
        costDefense_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (CostOffense != other.CostOffense) return false;
      if (CostDefense != other.CostDefense) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CostOffense != 0) hash ^= CostOffense.GetHashCode();
      if (CostDefense != 0) hash ^= CostDefense.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (CostOffense != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CostOffense);
      }
      if (CostDefense != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CostDefense);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CostOffense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostOffense);
      }
      if (CostDefense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostDefense);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardState other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CostOffense != 0) {
        CostOffense = other.CostOffense;
      }
      if (other.CostDefense != 0) {
        CostDefense = other.CostDefense;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            CostOffense = input.ReadInt32();
            break;
          }
          case 24: {
            CostDefense = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityState : pb::IMessage<EntityState> {
    private static readonly pb::MessageParser<EntityState> _parser = new pb::MessageParser<EntityState>(() => new EntityState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityState(EntityState other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      side_ = other.side_;
      hp_ = other.hp_;
      energy_ = other.energy_;
      maxEnergy_ = other.maxEnergy_;
      energyGain_ = other.energyGain_;
      muted_ = other.muted_;
      armed_ = other.armed_;
      locked_ = other.locked_;
      damageMod_ = other.damageMod_;
      buffable_ = other.buffable_;
      isPlayer_ = other.isPlayer_;
      position_ = other.position_;
      buffs_ = other.buffs_.Clone();
      weaponName_ = other.weaponName_;
      shipName_ = other.shipName_;
      handCards_ = other.handCards_;
      deckCards_ = other.deckCards_;
      hand_ = other.hand_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityState Clone() {
      return new EntityState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 3;
    private global::Protocol.Side side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Side Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 4;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 5;
    private int energy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "max_energy" field.</summary>
    public const int MaxEnergyFieldNumber = 6;
    private int maxEnergy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxEnergy {
      get { return maxEnergy_; }
      set {
        maxEnergy_ = value;
      }
    }

    /// <summary>Field number for the "energy_gain" field.</summary>
    public const int EnergyGainFieldNumber = 7;
    private int energyGain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnergyGain {
      get { return energyGain_; }
      set {
        energyGain_ = value;
      }
    }

    /// <summary>Field number for the "muted" field.</summary>
    public const int MutedFieldNumber = 8;
    private bool muted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Muted {
      get { return muted_; }
      set {
        muted_ = value;
      }
    }

    /// <summary>Field number for the "armed" field.</summary>
    public const int ArmedFieldNumber = 9;
    private bool armed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Armed {
      get { return armed_; }
      set {
        armed_ = value;
      }
    }

    /// <summary>Field number for the "locked" field.</summary>
    public const int LockedFieldNumber = 10;
    private bool locked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Locked {
      get { return locked_; }
      set {
        locked_ = value;
      }
    }

    /// <summary>Field number for the "damage_mod" field.</summary>
    public const int DamageModFieldNumber = 11;
    private int damageMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageMod {
      get { return damageMod_; }
      set {
        damageMod_ = value;
      }
    }

    /// <summary>Field number for the "buffable" field.</summary>
    public const int BuffableFieldNumber = 12;
    private bool buffable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Buffable {
      get { return buffable_; }
      set {
        buffable_ = value;
      }
    }

    /// <summary>Field number for the "is_player" field.</summary>
    public const int IsPlayerFieldNumber = 13;
    private bool isPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlayer {
      get { return isPlayer_; }
      set {
        isPlayer_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 14;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "buffs" field.</summary>
    public const int BuffsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Protocol.BuffState> _repeated_buffs_codec
        = pb::FieldCodec.ForMessage(122, global::Protocol.BuffState.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BuffState> buffs_ = new pbc::RepeatedField<global::Protocol.BuffState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BuffState> Buffs {
      get { return buffs_; }
    }

    /// <summary>Field number for the "weapon_name" field.</summary>
    public const int WeaponNameFieldNumber = 16;
    private string weaponName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponName {
      get { return weaponName_; }
      set {
        weaponName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ship_name" field.</summary>
    public const int ShipNameFieldNumber = 17;
    private string shipName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShipName {
      get { return shipName_; }
      set {
        shipName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hand_cards" field.</summary>
    public const int HandCardsFieldNumber = 18;
    private int handCards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandCards {
      get { return handCards_; }
      set {
        handCards_ = value;
      }
    }

    /// <summary>Field number for the "deck_cards" field.</summary>
    public const int DeckCardsFieldNumber = 19;
    private int deckCards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeckCards {
      get { return deckCards_; }
      set {
        deckCards_ = value;
      }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Protocol.CardState> _repeated_hand_codec
        = pb::FieldCodec.ForMessage(162, global::Protocol.CardState.Parser);
    private readonly pbc::RepeatedField<global::Protocol.CardState> hand_ = new pbc::RepeatedField<global::Protocol.CardState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.CardState> Hand {
      get { return hand_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Side != other.Side) return false;
      if (Hp != other.Hp) return false;
      if (Energy != other.Energy) return false;
      if (MaxEnergy != other.MaxEnergy) return false;
      if (EnergyGain != other.EnergyGain) return false;
      if (Muted != other.Muted) return false;
      if (Armed != other.Armed) return false;
      if (Locked != other.Locked) return false;
      if (DamageMod != other.DamageMod) return false;
      if (Buffable != other.Buffable) return false;
      if (IsPlayer != other.IsPlayer) return false;
      if (Position != other.Position) return false;
      if(!buffs_.Equals(other.buffs_)) return false;
      if (WeaponName != other.WeaponName) return false;
      if (ShipName != other.ShipName) return false;
      if (HandCards != other.HandCards) return false;
      if (DeckCards != other.DeckCards) return false;
      if(!hand_.Equals(other.hand_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Energy != 0) hash ^= Energy.GetHashCode();
      if (MaxEnergy != 0) hash ^= MaxEnergy.GetHashCode();
      if (EnergyGain != 0) hash ^= EnergyGain.GetHashCode();
      if (Muted != false) hash ^= Muted.GetHashCode();
      if (Armed != false) hash ^= Armed.GetHashCode();
      if (Locked != false) hash ^= Locked.GetHashCode();
      if (DamageMod != 0) hash ^= DamageMod.GetHashCode();
      if (Buffable != false) hash ^= Buffable.GetHashCode();
      if (IsPlayer != false) hash ^= IsPlayer.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      hash ^= buffs_.GetHashCode();
      if (WeaponName.Length != 0) hash ^= WeaponName.GetHashCode();
      if (ShipName.Length != 0) hash ^= ShipName.GetHashCode();
      if (HandCards != 0) hash ^= HandCards.GetHashCode();
      if (DeckCards != 0) hash ^= DeckCards.GetHashCode();
      hash ^= hand_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Side != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Side);
      }
      if (Hp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Hp);
      }
      if (Energy != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Energy);
      }
      if (MaxEnergy != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxEnergy);
      }
      if (EnergyGain != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EnergyGain);
      }
      if (Muted != false) {
        output.WriteRawTag(64);
        output.WriteBool(Muted);
      }
      if (Armed != false) {
        output.WriteRawTag(72);
        output.WriteBool(Armed);
      }
      if (Locked != false) {
        output.WriteRawTag(80);
        output.WriteBool(Locked);
      }
      if (DamageMod != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DamageMod);
      }
      if (Buffable != false) {
        output.WriteRawTag(96);
        output.WriteBool(Buffable);
      }
      if (IsPlayer != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsPlayer);
      }
      if (Position != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Position);
      }
      buffs_.WriteTo(output, _repeated_buffs_codec);
      if (WeaponName.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WeaponName);
      }
      if (ShipName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ShipName);
      }
      if (HandCards != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(HandCards);
      }
      if (DeckCards != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(DeckCards);
      }
      hand_.WriteTo(output, _repeated_hand_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
      }
      if (MaxEnergy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxEnergy);
      }
      if (EnergyGain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnergyGain);
      }
      if (Muted != false) {
        size += 1 + 1;
      }
      if (Armed != false) {
        size += 1 + 1;
      }
      if (Locked != false) {
        size += 1 + 1;
      }
      if (DamageMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageMod);
      }
      if (Buffable != false) {
        size += 1 + 1;
      }
      if (IsPlayer != false) {
        size += 1 + 1;
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      size += buffs_.CalculateSize(_repeated_buffs_codec);
      if (WeaponName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WeaponName);
      }
      if (ShipName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShipName);
      }
      if (HandCards != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HandCards);
      }
      if (DeckCards != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeckCards);
      }
      size += hand_.CalculateSize(_repeated_hand_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityState other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Energy != 0) {
        Energy = other.Energy;
      }
      if (other.MaxEnergy != 0) {
        MaxEnergy = other.MaxEnergy;
      }
      if (other.EnergyGain != 0) {
        EnergyGain = other.EnergyGain;
      }
      if (other.Muted != false) {
        Muted = other.Muted;
      }
      if (other.Armed != false) {
        Armed = other.Armed;
      }
      if (other.Locked != false) {
        Locked = other.Locked;
      }
      if (other.DamageMod != 0) {
        DamageMod = other.DamageMod;
      }
      if (other.Buffable != false) {
        Buffable = other.Buffable;
      }
      if (other.IsPlayer != false) {
        IsPlayer = other.IsPlayer;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      buffs_.Add(other.buffs_);
      if (other.WeaponName.Length != 0) {
        WeaponName = other.WeaponName;
      }
      if (other.ShipName.Length != 0) {
        ShipName = other.ShipName;
      }
      if (other.HandCards != 0) {
        HandCards = other.HandCards;
      }
      if (other.DeckCards != 0) {
        DeckCards = other.DeckCards;
      }
      hand_.Add(other.hand_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            side_ = (global::Protocol.Side) input.ReadEnum();
            break;
          }
          case 32: {
            Hp = input.ReadInt32();
            break;
          }
          case 40: {
            Energy = input.ReadInt32();
            break;
          }
          case 48: {
            MaxEnergy = input.ReadInt32();
            break;
          }
          case 56: {
            EnergyGain = input.ReadInt32();
            break;
          }
          case 64: {
            Muted = input.ReadBool();
            break;
          }
          case 72: {
            Armed = input.ReadBool();
            break;
          }
          case 80: {
            Locked = input.ReadBool();
            break;
          }
          case 88: {
            DamageMod = input.ReadInt32();
            break;
          }
          case 96: {
            Buffable = input.ReadBool();
            break;
          }
          case 104: {
            IsPlayer = input.ReadBool();
            break;
          }
          case 112: {
            Position = input.ReadInt32();
            break;
          }
          case 122: {
            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
            break;
          }
          case 130: {
            WeaponName = input.ReadString();
            break;
          }
          case 138: {
            ShipName = input.ReadString();
            break;
          }
          case 144: {
            HandCards = input.ReadInt32();
            break;
          }
          case 152: {
            DeckCards = input.ReadInt32();
            break;
          }
          case 162: {
            hand_.AddEntriesFrom(input, _repeated_hand_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameState : pb::IMessage<GameState> {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      id_ = other.id_;
      turn_ = other.turn_;
      objects_ = other.objects_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "turn" field.</summary>
    public const int TurnFieldNumber = 2;
    private global::Protocol.Side turn_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Side Turn {
      get { return turn_; }
      set {
        turn_ = value;
      }
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.EntityState> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.EntityState.Parser);
    private readonly pbc::RepeatedField<global::Protocol.EntityState> objects_ = new pbc::RepeatedField<global::Protocol.EntityState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.EntityState> Objects {
      get { return objects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Turn != other.Turn) return false;
      if(!objects_.Equals(other.objects_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Turn != 0) hash ^= Turn.GetHashCode();
      hash ^= objects_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Turn != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Turn);
      }
      objects_.WriteTo(output, _repeated_objects_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Turn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Turn);
      }
      size += objects_.CalculateSize(_repeated_objects_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Turn != 0) {
        Turn = other.Turn;
      }
      objects_.Add(other.objects_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            turn_ = (global::Protocol.Side) input.ReadEnum();
            break;
          }
          case 26: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameAction : pb::IMessage<GameAction> {
    private static readonly pb::MessageParser<GameAction> _parser = new pb::MessageParser<GameAction>(() => new GameAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction(GameAction other) : this() {
      action_ = other.action_;
      card_ = other.card_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction Clone() {
      return new GameAction(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::Protocol.PlayerAction action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PlayerAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 2;
    private string card_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Card {
      get { return card_; }
      set {
        card_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (Card != other.Card) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (Card.Length != 0) hash ^= Card.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      if (Card.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Card);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (Card.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Card);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameAction other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.Card.Length != 0) {
        Card = other.Card;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            action_ = (global::Protocol.PlayerAction) input.ReadEnum();
            break;
          }
          case 18: {
            Card = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameEffectArgument : pb::IMessage<GameEffectArgument> {
    private static readonly pb::MessageParser<GameEffectArgument> _parser = new pb::MessageParser<GameEffectArgument>(() => new GameEffectArgument());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEffectArgument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEffectArgument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEffectArgument(GameEffectArgument other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEffectArgument Clone() {
      return new GameEffectArgument(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEffectArgument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEffectArgument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEffectArgument other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameEffect : pb::IMessage<GameEffect> {
    private static readonly pb::MessageParser<GameEffect> _parser = new pb::MessageParser<GameEffect>(() => new GameEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEffect(GameEffect other) : this() {
      sourceEntity_ = other.sourceEntity_;
      targetEntity_ = other.targetEntity_;
      Action = other.action_ != null ? other.Action.Clone() : null;
      effectName_ = other.effectName_;
      arguments_ = other.arguments_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEffect Clone() {
      return new GameEffect(this);
    }

    /// <summary>Field number for the "source_entity" field.</summary>
    public const int SourceEntityFieldNumber = 1;
    private int sourceEntity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceEntity {
      get { return sourceEntity_; }
      set {
        sourceEntity_ = value;
      }
    }

    /// <summary>Field number for the "target_entity" field.</summary>
    public const int TargetEntityFieldNumber = 2;
    private int targetEntity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetEntity {
      get { return targetEntity_; }
      set {
        targetEntity_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 3;
    private global::Protocol.GameAction action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GameAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "effect_name" field.</summary>
    public const int EffectNameFieldNumber = 4;
    private string effectName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EffectName {
      get { return effectName_; }
      set {
        effectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.GameEffectArgument> _repeated_arguments_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.GameEffectArgument.Parser);
    private readonly pbc::RepeatedField<global::Protocol.GameEffectArgument> arguments_ = new pbc::RepeatedField<global::Protocol.GameEffectArgument>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.GameEffectArgument> Arguments {
      get { return arguments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceEntity != other.SourceEntity) return false;
      if (TargetEntity != other.TargetEntity) return false;
      if (!object.Equals(Action, other.Action)) return false;
      if (EffectName != other.EffectName) return false;
      if(!arguments_.Equals(other.arguments_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceEntity != 0) hash ^= SourceEntity.GetHashCode();
      if (TargetEntity != 0) hash ^= TargetEntity.GetHashCode();
      if (action_ != null) hash ^= Action.GetHashCode();
      if (EffectName.Length != 0) hash ^= EffectName.GetHashCode();
      hash ^= arguments_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceEntity != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceEntity);
      }
      if (TargetEntity != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetEntity);
      }
      if (action_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Action);
      }
      if (EffectName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EffectName);
      }
      arguments_.WriteTo(output, _repeated_arguments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceEntity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceEntity);
      }
      if (TargetEntity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntity);
      }
      if (action_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
      }
      if (EffectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectName);
      }
      size += arguments_.CalculateSize(_repeated_arguments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEffect other) {
      if (other == null) {
        return;
      }
      if (other.SourceEntity != 0) {
        SourceEntity = other.SourceEntity;
      }
      if (other.TargetEntity != 0) {
        TargetEntity = other.TargetEntity;
      }
      if (other.action_ != null) {
        if (action_ == null) {
          action_ = new global::Protocol.GameAction();
        }
        Action.MergeFrom(other.Action);
      }
      if (other.EffectName.Length != 0) {
        EffectName = other.EffectName;
      }
      arguments_.Add(other.arguments_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SourceEntity = input.ReadInt32();
            break;
          }
          case 16: {
            TargetEntity = input.ReadInt32();
            break;
          }
          case 26: {
            if (action_ == null) {
              action_ = new global::Protocol.GameAction();
            }
            input.ReadMessage(action_);
            break;
          }
          case 34: {
            EffectName = input.ReadString();
            break;
          }
          case 42: {
            arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SrvHello : pb::IMessage<SrvHello> {
    private static readonly pb::MessageParser<SrvHello> _parser = new pb::MessageParser<SrvHello>(() => new SrvHello());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvHello> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvHello() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvHello(SrvHello other) : this() {
      version_ = other.version_;
      players_ = other.players_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvHello Clone() {
      return new SrvHello(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private int players_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Players {
      get { return players_; }
      set {
        players_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvHello);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvHello other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Players != other.Players) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Players != 0) hash ^= Players.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (Players != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Players);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Players != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Players);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvHello other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Players != 0) {
        Players = other.Players;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 16: {
            Players = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CliQueuePreferences : pb::IMessage<CliQueuePreferences> {
    private static readonly pb::MessageParser<CliQueuePreferences> _parser = new pb::MessageParser<CliQueuePreferences>(() => new CliQueuePreferences());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CliQueuePreferences> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CliQueuePreferences() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CliQueuePreferences(CliQueuePreferences other) : this() {
      ship_ = other.ship_;
      weapon_ = other.weapon_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CliQueuePreferences Clone() {
      return new CliQueuePreferences(this);
    }

    /// <summary>Field number for the "ship" field.</summary>
    public const int ShipFieldNumber = 1;
    private string ship_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ship {
      get { return ship_; }
      set {
        ship_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weapon" field.</summary>
    public const int WeaponFieldNumber = 2;
    private string weapon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Weapon {
      get { return weapon_; }
      set {
        weapon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CliQueuePreferences);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CliQueuePreferences other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ship != other.Ship) return false;
      if (Weapon != other.Weapon) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ship.Length != 0) hash ^= Ship.GetHashCode();
      if (Weapon.Length != 0) hash ^= Weapon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ship.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ship);
      }
      if (Weapon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Weapon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ship.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ship);
      }
      if (Weapon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Weapon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CliQueuePreferences other) {
      if (other == null) {
        return;
      }
      if (other.Ship.Length != 0) {
        Ship = other.Ship;
      }
      if (other.Weapon.Length != 0) {
        Weapon = other.Weapon;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ship = input.ReadString();
            break;
          }
          case 18: {
            Weapon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SrvQueueGameCreated : pb::IMessage<SrvQueueGameCreated> {
    private static readonly pb::MessageParser<SrvQueueGameCreated> _parser = new pb::MessageParser<SrvQueueGameCreated>(() => new SrvQueueGameCreated());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvQueueGameCreated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvQueueGameCreated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvQueueGameCreated(SrvQueueGameCreated other) : this() {
      gameId_ = other.gameId_;
      side_ = other.side_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvQueueGameCreated Clone() {
      return new SrvQueueGameCreated(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::Protocol.Side side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Side Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvQueueGameCreated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvQueueGameCreated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (Side != other.Side) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (Side != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Side);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvQueueGameCreated other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 16: {
            side_ = (global::Protocol.Side) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SrvGameMessage : pb::IMessage<SrvGameMessage> {
    private static readonly pb::MessageParser<SrvGameMessage> _parser = new pb::MessageParser<SrvGameMessage>(() => new SrvGameMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvGameMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvGameMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvGameMessage(SrvGameMessage other) : this() {
      gameId_ = other.gameId_;
      State = other.state_ != null ? other.State.Clone() : null;
      yourSide_ = other.yourSide_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.Action:
          Action = other.Action.Clone();
          break;
        case PayloadOneofCase.Effect:
          Effect = other.Effect.Clone();
          break;
        case PayloadOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvGameMessage Clone() {
      return new SrvGameMessage(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Protocol.GameState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GameState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    /// <summary>
    ///  Client action
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GameAction Action {
      get { return payloadCase_ == PayloadOneofCase.Action ? (global::Protocol.GameAction) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Action;
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 5;
    /// <summary>
    ///  Server response (game state changers)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GameEffect Effect {
      get { return payloadCase_ == PayloadOneofCase.Effect ? (global::Protocol.GameEffect) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Effect;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return payloadCase_ == PayloadOneofCase.Error ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Error;
      }
    }

    /// <summary>Field number for the "your_side" field.</summary>
    public const int YourSideFieldNumber = 6;
    private global::Protocol.Side yourSide_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Side YourSide {
      get { return yourSide_; }
      set {
        yourSide_ = value;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Action = 4,
      Effect = 5,
      Error = 7,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvGameMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvGameMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (!object.Equals(State, other.State)) return false;
      if (!object.Equals(Action, other.Action)) return false;
      if (!object.Equals(Effect, other.Effect)) return false;
      if (Error != other.Error) return false;
      if (YourSide != other.YourSide) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Action) hash ^= Action.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Effect) hash ^= Effect.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Error) hash ^= Error.GetHashCode();
      if (YourSide != 0) hash ^= YourSide.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (state_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(State);
      }
      if (payloadCase_ == PayloadOneofCase.Action) {
        output.WriteRawTag(34);
        output.WriteMessage(Action);
      }
      if (payloadCase_ == PayloadOneofCase.Effect) {
        output.WriteRawTag(42);
        output.WriteMessage(Effect);
      }
      if (YourSide != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) YourSide);
      }
      if (payloadCase_ == PayloadOneofCase.Error) {
        output.WriteRawTag(58);
        output.WriteString(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (payloadCase_ == PayloadOneofCase.Action) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
      }
      if (payloadCase_ == PayloadOneofCase.Effect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Effect);
      }
      if (payloadCase_ == PayloadOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (YourSide != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) YourSide);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvGameMessage other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.state_ != null) {
        if (state_ == null) {
          state_ = new global::Protocol.GameState();
        }
        State.MergeFrom(other.State);
      }
      if (other.YourSide != 0) {
        YourSide = other.YourSide;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Action:
          Action = other.Action;
          break;
        case PayloadOneofCase.Effect:
          Effect = other.Effect;
          break;
        case PayloadOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 18: {
            if (state_ == null) {
              state_ = new global::Protocol.GameState();
            }
            input.ReadMessage(state_);
            break;
          }
          case 34: {
            global::Protocol.GameAction subBuilder = new global::Protocol.GameAction();
            if (payloadCase_ == PayloadOneofCase.Action) {
              subBuilder.MergeFrom(Action);
            }
            input.ReadMessage(subBuilder);
            Action = subBuilder;
            break;
          }
          case 42: {
            global::Protocol.GameEffect subBuilder = new global::Protocol.GameEffect();
            if (payloadCase_ == PayloadOneofCase.Effect) {
              subBuilder.MergeFrom(Effect);
            }
            input.ReadMessage(subBuilder);
            Effect = subBuilder;
            break;
          }
          case 48: {
            yourSide_ = (global::Protocol.Side) input.ReadEnum();
            break;
          }
          case 58: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SrvGameEnded : pb::IMessage<SrvGameEnded> {
    private static readonly pb::MessageParser<SrvGameEnded> _parser = new pb::MessageParser<SrvGameEnded>(() => new SrvGameEnded());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvGameEnded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvGameEnded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvGameEnded(SrvGameEnded other) : this() {
      gameId_ = other.gameId_;
      interrupted_ = other.interrupted_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvGameEnded Clone() {
      return new SrvGameEnded(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "interrupted" field.</summary>
    public const int InterruptedFieldNumber = 2;
    private bool interrupted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Interrupted {
      get { return interrupted_; }
      set {
        interrupted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvGameEnded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvGameEnded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (Interrupted != other.Interrupted) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (Interrupted != false) hash ^= Interrupted.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (Interrupted != false) {
        output.WriteRawTag(16);
        output.WriteBool(Interrupted);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (Interrupted != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvGameEnded other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.Interrupted != false) {
        Interrupted = other.Interrupted;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 16: {
            Interrupted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SrvPlayerLeft : pb::IMessage<SrvPlayerLeft> {
    private static readonly pb::MessageParser<SrvPlayerLeft> _parser = new pb::MessageParser<SrvPlayerLeft>(() => new SrvPlayerLeft());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvPlayerLeft> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvPlayerLeft() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvPlayerLeft(SrvPlayerLeft other) : this() {
      gameId_ = other.gameId_;
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvPlayerLeft Clone() {
      return new SrvPlayerLeft(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvPlayerLeft);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvPlayerLeft other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvPlayerLeft other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      domain_ = other.domain_;
      head_ = other.head_;
      status_ = other.status_;
      switch (other.BodyCase) {
        case BodyOneofCase.Error:
          Error = other.Error;
          break;
        case BodyOneofCase.Hello:
          Hello = other.Hello.Clone();
          break;
        case BodyOneofCase.GameCreated:
          GameCreated = other.GameCreated.Clone();
          break;
        case BodyOneofCase.GameEnded:
          GameEnded = other.GameEnded.Clone();
          break;
        case BodyOneofCase.Game:
          Game = other.Game.Clone();
          break;
        case BodyOneofCase.QueuePrefs:
          QueuePrefs = other.QueuePrefs.Clone();
          break;
        case BodyOneofCase.PlayerLeft:
          PlayerLeft = other.PlayerLeft.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private global::Protocol.Domain domain_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Domain Domain {
      get { return domain_; }
      set {
        domain_ = value;
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 2;
    private global::Protocol.Head head_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Head Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return bodyCase_ == BodyOneofCase.Error ? (string) body_ : ""; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        bodyCase_ = BodyOneofCase.Error;
      }
    }

    /// <summary>Field number for the "hello" field.</summary>
    public const int HelloFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SrvHello Hello {
      get { return bodyCase_ == BodyOneofCase.Hello ? (global::Protocol.SrvHello) body_ : null; }
      set {
        body_ = value;
        bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.Hello;
      }
    }

    /// <summary>Field number for the "game_created" field.</summary>
    public const int GameCreatedFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SrvQueueGameCreated GameCreated {
      get { return bodyCase_ == BodyOneofCase.GameCreated ? (global::Protocol.SrvQueueGameCreated) body_ : null; }
      set {
        body_ = value;
        bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.GameCreated;
      }
    }

    /// <summary>Field number for the "game_ended" field.</summary>
    public const int GameEndedFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SrvGameEnded GameEnded {
      get { return bodyCase_ == BodyOneofCase.GameEnded ? (global::Protocol.SrvGameEnded) body_ : null; }
      set {
        body_ = value;
        bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.GameEnded;
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SrvGameMessage Game {
      get { return bodyCase_ == BodyOneofCase.Game ? (global::Protocol.SrvGameMessage) body_ : null; }
      set {
        body_ = value;
        bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.Game;
      }
    }

    /// <summary>Field number for the "queue_prefs" field.</summary>
    public const int QueuePrefsFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.CliQueuePreferences QueuePrefs {
      get { return bodyCase_ == BodyOneofCase.QueuePrefs ? (global::Protocol.CliQueuePreferences) body_ : null; }
      set {
        body_ = value;
        bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.QueuePrefs;
      }
    }

    /// <summary>Field number for the "player_left" field.</summary>
    public const int PlayerLeftFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SrvPlayerLeft PlayerLeft {
      get { return bodyCase_ == BodyOneofCase.PlayerLeft ? (global::Protocol.SrvPlayerLeft) body_ : null; }
      set {
        body_ = value;
        bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.PlayerLeft;
      }
    }

    private object body_;
    /// <summary>Enum of possible cases for the "body" oneof.</summary>
    public enum BodyOneofCase {
      None = 0,
      Error = 4,
      Hello = 5,
      GameCreated = 6,
      GameEnded = 8,
      Game = 9,
      QueuePrefs = 10,
      PlayerLeft = 11,
    }
    private BodyOneofCase bodyCase_ = BodyOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BodyOneofCase BodyCase {
      get { return bodyCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBody() {
      bodyCase_ = BodyOneofCase.None;
      body_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Head != other.Head) return false;
      if (Status != other.Status) return false;
      if (Error != other.Error) return false;
      if (!object.Equals(Hello, other.Hello)) return false;
      if (!object.Equals(GameCreated, other.GameCreated)) return false;
      if (!object.Equals(GameEnded, other.GameEnded)) return false;
      if (!object.Equals(Game, other.Game)) return false;
      if (!object.Equals(QueuePrefs, other.QueuePrefs)) return false;
      if (!object.Equals(PlayerLeft, other.PlayerLeft)) return false;
      if (BodyCase != other.BodyCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain != 0) hash ^= Domain.GetHashCode();
      if (Head != 0) hash ^= Head.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (bodyCase_ == BodyOneofCase.Error) hash ^= Error.GetHashCode();
      if (bodyCase_ == BodyOneofCase.Hello) hash ^= Hello.GetHashCode();
      if (bodyCase_ == BodyOneofCase.GameCreated) hash ^= GameCreated.GetHashCode();
      if (bodyCase_ == BodyOneofCase.GameEnded) hash ^= GameEnded.GetHashCode();
      if (bodyCase_ == BodyOneofCase.Game) hash ^= Game.GetHashCode();
      if (bodyCase_ == BodyOneofCase.QueuePrefs) hash ^= QueuePrefs.GetHashCode();
      if (bodyCase_ == BodyOneofCase.PlayerLeft) hash ^= PlayerLeft.GetHashCode();
      hash ^= (int) bodyCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Domain);
      }
      if (Head != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Head);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Status);
      }
      if (bodyCase_ == BodyOneofCase.Error) {
        output.WriteRawTag(34);
        output.WriteString(Error);
      }
      if (bodyCase_ == BodyOneofCase.Hello) {
        output.WriteRawTag(42);
        output.WriteMessage(Hello);
      }
      if (bodyCase_ == BodyOneofCase.GameCreated) {
        output.WriteRawTag(50);
        output.WriteMessage(GameCreated);
      }
      if (bodyCase_ == BodyOneofCase.GameEnded) {
        output.WriteRawTag(66);
        output.WriteMessage(GameEnded);
      }
      if (bodyCase_ == BodyOneofCase.Game) {
        output.WriteRawTag(74);
        output.WriteMessage(Game);
      }
      if (bodyCase_ == BodyOneofCase.QueuePrefs) {
        output.WriteRawTag(82);
        output.WriteMessage(QueuePrefs);
      }
      if (bodyCase_ == BodyOneofCase.PlayerLeft) {
        output.WriteRawTag(90);
        output.WriteMessage(PlayerLeft);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Domain);
      }
      if (Head != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Head);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (bodyCase_ == BodyOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (bodyCase_ == BodyOneofCase.Hello) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hello);
      }
      if (bodyCase_ == BodyOneofCase.GameCreated) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameCreated);
      }
      if (bodyCase_ == BodyOneofCase.GameEnded) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameEnded);
      }
      if (bodyCase_ == BodyOneofCase.Game) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game);
      }
      if (bodyCase_ == BodyOneofCase.QueuePrefs) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueuePrefs);
      }
      if (bodyCase_ == BodyOneofCase.PlayerLeft) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerLeft);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Domain != 0) {
        Domain = other.Domain;
      }
      if (other.Head != 0) {
        Head = other.Head;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      switch (other.BodyCase) {
        case BodyOneofCase.Error:
          Error = other.Error;
          break;
        case BodyOneofCase.Hello:
          Hello = other.Hello;
          break;
        case BodyOneofCase.GameCreated:
          GameCreated = other.GameCreated;
          break;
        case BodyOneofCase.GameEnded:
          GameEnded = other.GameEnded;
          break;
        case BodyOneofCase.Game:
          Game = other.Game;
          break;
        case BodyOneofCase.QueuePrefs:
          QueuePrefs = other.QueuePrefs;
          break;
        case BodyOneofCase.PlayerLeft:
          PlayerLeft = other.PlayerLeft;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            domain_ = (global::Protocol.Domain) input.ReadEnum();
            break;
          }
          case 16: {
            head_ = (global::Protocol.Head) input.ReadEnum();
            break;
          }
          case 26: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            Error = input.ReadString();
            break;
          }
          case 42: {
            global::Protocol.SrvHello subBuilder = new global::Protocol.SrvHello();
            if (bodyCase_ == BodyOneofCase.Hello) {
              subBuilder.MergeFrom(Hello);
            }
            input.ReadMessage(subBuilder);
            Hello = subBuilder;
            break;
          }
          case 50: {
            global::Protocol.SrvQueueGameCreated subBuilder = new global::Protocol.SrvQueueGameCreated();
            if (bodyCase_ == BodyOneofCase.GameCreated) {
              subBuilder.MergeFrom(GameCreated);
            }
            input.ReadMessage(subBuilder);
            GameCreated = subBuilder;
            break;
          }
          case 66: {
            global::Protocol.SrvGameEnded subBuilder = new global::Protocol.SrvGameEnded();
            if (bodyCase_ == BodyOneofCase.GameEnded) {
              subBuilder.MergeFrom(GameEnded);
            }
            input.ReadMessage(subBuilder);
            GameEnded = subBuilder;
            break;
          }
          case 74: {
            global::Protocol.SrvGameMessage subBuilder = new global::Protocol.SrvGameMessage();
            if (bodyCase_ == BodyOneofCase.Game) {
              subBuilder.MergeFrom(Game);
            }
            input.ReadMessage(subBuilder);
            Game = subBuilder;
            break;
          }
          case 82: {
            global::Protocol.CliQueuePreferences subBuilder = new global::Protocol.CliQueuePreferences();
            if (bodyCase_ == BodyOneofCase.QueuePrefs) {
              subBuilder.MergeFrom(QueuePrefs);
            }
            input.ReadMessage(subBuilder);
            QueuePrefs = subBuilder;
            break;
          }
          case 90: {
            global::Protocol.SrvPlayerLeft subBuilder = new global::Protocol.SrvPlayerLeft();
            if (bodyCase_ == BodyOneofCase.PlayerLeft) {
              subBuilder.MergeFrom(PlayerLeft);
            }
            input.ReadMessage(subBuilder);
            PlayerLeft = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
