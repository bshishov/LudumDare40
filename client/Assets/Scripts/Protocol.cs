// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wcm90b2NvbC5wcm90bxIIcHJvdG9jb2waHGdvb2dsZS9wcm90b2J1Zi9z",
            "dHJ1Y3QucHJvdG8i/w4KB01lc3NhZ2USKAoGZG9tYWluGAEgASgOMhgucHJv",
            "dG9jb2wuTWVzc2FnZS5Eb21haW4SJAoEaGVhZBgCIAEoDjIWLnByb3RvY29s",
            "Lk1lc3NhZ2UuSGVhZBIOCgZzdGF0dXMYAyABKAkSDwoFZXJyb3IYBCABKAlI",
            "ABIsCgVoZWxsbxgFIAEoCzIbLnByb3RvY29sLk1lc3NhZ2UuQm9keUhlbGxv",
            "SAASMQoEZ2FtZRgGIAEoCzIhLnByb3RvY29sLk1lc3NhZ2UuQm9keUdhbWVN",
            "ZXNzYWdlSAASPQoLcXVldWVfcHJlZnMYByABKAsyJi5wcm90b2NvbC5NZXNz",
            "YWdlLkJvZHlRdWV1ZVByZWZlcmVuY2VzSAAaKwoJQnVmZlN0YXRlEgwKBGdh",
            "bWUYASABKAkSEAoIZHVyYXRpb24YAiABKAUaRQoJQ2FyZFN0YXRlEgwKBG5h",
            "bWUYASABKAkSFAoMY29zdF9vZmZlbnNlGAIgASgFEhQKDGNvc3RfZGVmZW5z",
            "ZRgDIAEoBRqyAwoLRW50aXR5U3RhdGUSCgoCaWQYASABKAUSDAoEbmFtZRgC",
            "IAEoCRIkCgRzaWRlGAMgASgOMhYucHJvdG9jb2wuTWVzc2FnZS5TaWRlEgoK",
            "AmhwGAQgASgFEg4KBmVuZXJneRgFIAEoBRISCgptYXhfZW5lcmd5GAYgASgF",
            "EhMKC2VuZXJneV9nYWluGAcgASgFEg0KBW11dGVkGAggASgIEg0KBWFybWVk",
            "GAkgASgIEg4KBmxvY2tlZBgKIAEoCBISCgpkYW1hZ2VfbW9kGAsgASgFEhAK",
            "CGJ1ZmZhYmxlGAwgASgIEhEKCWlzX3BsYXllchgNIAEoCBIQCghwb3NpdGlv",
            "bhgOIAEoBRIqCgVidWZmcxgPIAMoCzIbLnByb3RvY29sLk1lc3NhZ2UuQnVm",
            "ZlN0YXRlEhMKC3dlYXBvbl9uYW1lGBAgASgJEhEKCXNoaXBfbmFtZRgRIAEo",
            "CRISCgpoYW5kX2NhcmRzGBIgASgFEhIKCmRlY2tfY2FyZHMYEyABKAUSKQoE",
            "aGFuZBgUIAMoCzIbLnByb3RvY29sLk1lc3NhZ2UuQ2FyZFN0YXRlGm0KCUdh",
            "bWVTdGF0ZRIKCgJpZBgBIAEoCRIkCgR0dXJuGAIgASgOMhYucHJvdG9jb2wu",
            "TWVzc2FnZS5TaWRlEi4KB29iamVjdHMYAyADKAsyHS5wcm90b2NvbC5NZXNz",
            "YWdlLkVudGl0eVN0YXRlGkoKCkJvZHlBY3Rpb24SLgoGYWN0aW9uGAEgASgO",
            "Mh4ucHJvdG9jb2wuTWVzc2FnZS5QbGF5ZXJBY3Rpb24SDAoEY2FyZBgCIAEo",
            "CRqpAQoKQm9keUVmZmVjdBIVCg1zb3VyY2VfZW50aXR5GAEgASgFEhUKDXRh",
            "cmdldF9lbnRpdHkYAiABKAUSLAoGYWN0aW9uGAMgASgLMhwucHJvdG9jb2wu",
            "TWVzc2FnZS5Cb2R5QWN0aW9uEhMKC2VmZmVjdF9uYW1lGAQgASgJEioKCWFy",
            "Z3VtZW50cxgFIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QaLQoJQm9k",
            "eUhlbGxvEg8KB3ZlcnNpb24YASABKAkSDwoHcGxheWVycxgCIAEoBRq5AQoP",
            "Qm9keUdhbWVNZXNzYWdlEg8KB2dhbWVfaWQYASABKAkSKgoFc3RhdGUYAiAB",
            "KAsyGy5wcm90b2NvbC5NZXNzYWdlLkdhbWVTdGF0ZRIuCgZhY3Rpb24YAyAB",
            "KAsyHC5wcm90b2NvbC5NZXNzYWdlLkJvZHlBY3Rpb25IABIuCgZlZmZlY3QY",
            "BCABKAsyHC5wcm90b2NvbC5NZXNzYWdlLkJvZHlFZmZlY3RIAEIJCgdwYXls",
            "b2FkGjQKFEJvZHlRdWV1ZVByZWZlcmVuY2VzEgwKBHNoaXAYASABKAkSDgoG",
            "d2VhcG9uGAIgASgJIh0KBkRvbWFpbhIJCgVMT0JCWRAAEggKBEdBTUUQASKp",
            "AgoESGVhZBINCglTUlZfSEVMTE8QABINCglTUlZfRVJST1IQARIVChFTUlZf",
            "UVVFVUVfU1RBUlRFRBACEhUKEVNSVl9RVUVVRV9TVE9QUEVEEAMSGgoWU1JW",
            "X1FVRVVFX0dBTUVfQ1JFQVRFRBAEEhIKDlNSVl9HQU1FX0JFR0lOEAUSEAoM",
            "U1JWX0dBTUVfRU5EEAYSGAoUU1JWX0dBTUVfUExBWUVSX0xFRlQQBxIRCg1T",
            "UlZfR0FNRV9UVVJOEAgSEwoPU1JWX0dBTUVfQUNUSU9OEAkSEwoPU1JWX0dB",
            "TUVfRUZGRUNUEAoSEwoPQ0xJX1FVRVVFX1NUQVJUEAsSEgoOQ0xJX1FVRVVF",
            "X1NUT1AQDBITCg9DTElfR0FNRV9BQ1RJT04QDSIhCgRTaWRlEgsKB05FVVRS",
            "QUwQABIFCgFBEAESBQoBQhACIjwKDFBsYXllckFjdGlvbhINCglQTEFZX0NB",
            "UkQQABIPCgtGSVJFX1dFQVBPThABEgwKCEVORF9UVVJOEAJCBgoEYm9keWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message), global::Protocol.Message.Parser, new[]{ "Domain", "Head", "Status", "Error", "Hello", "Game", "QueuePrefs" }, new[]{ "Body" }, new[]{ typeof(global::Protocol.Message.Types.Domain), typeof(global::Protocol.Message.Types.Head), typeof(global::Protocol.Message.Types.Side), typeof(global::Protocol.Message.Types.PlayerAction) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message.Types.BuffState), global::Protocol.Message.Types.BuffState.Parser, new[]{ "Game", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message.Types.CardState), global::Protocol.Message.Types.CardState.Parser, new[]{ "Name", "CostOffense", "CostDefense" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message.Types.EntityState), global::Protocol.Message.Types.EntityState.Parser, new[]{ "Id", "Name", "Side", "Hp", "Energy", "MaxEnergy", "EnergyGain", "Muted", "Armed", "Locked", "DamageMod", "Buffable", "IsPlayer", "Position", "Buffs", "WeaponName", "ShipName", "HandCards", "DeckCards", "Hand" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message.Types.GameState), global::Protocol.Message.Types.GameState.Parser, new[]{ "Id", "Turn", "Objects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message.Types.BodyAction), global::Protocol.Message.Types.BodyAction.Parser, new[]{ "Action", "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message.Types.BodyEffect), global::Protocol.Message.Types.BodyEffect.Parser, new[]{ "SourceEntity", "TargetEntity", "Action", "EffectName", "Arguments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message.Types.BodyHello), global::Protocol.Message.Types.BodyHello.Parser, new[]{ "Version", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message.Types.BodyGameMessage), global::Protocol.Message.Types.BodyGameMessage.Parser, new[]{ "GameId", "State", "Action", "Effect" }, new[]{ "Payload" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message.Types.BodyQueuePreferences), global::Protocol.Message.Types.BodyQueuePreferences.Parser, new[]{ "Ship", "Weapon" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      domain_ = other.domain_;
      head_ = other.head_;
      status_ = other.status_;
      switch (other.BodyCase) {
        case BodyOneofCase.Error:
          Error = other.Error;
          break;
        case BodyOneofCase.Hello:
          Hello = other.Hello.Clone();
          break;
        case BodyOneofCase.Game:
          Game = other.Game.Clone();
          break;
        case BodyOneofCase.QueuePrefs:
          QueuePrefs = other.QueuePrefs.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private global::Protocol.Message.Types.Domain domain_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Message.Types.Domain Domain {
      get { return domain_; }
      set {
        domain_ = value;
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 2;
    private global::Protocol.Message.Types.Head head_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Message.Types.Head Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return bodyCase_ == BodyOneofCase.Error ? (string) body_ : ""; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        bodyCase_ = BodyOneofCase.Error;
      }
    }

    /// <summary>Field number for the "hello" field.</summary>
    public const int HelloFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Message.Types.BodyHello Hello {
      get { return bodyCase_ == BodyOneofCase.Hello ? (global::Protocol.Message.Types.BodyHello) body_ : null; }
      set {
        body_ = value;
        bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.Hello;
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Message.Types.BodyGameMessage Game {
      get { return bodyCase_ == BodyOneofCase.Game ? (global::Protocol.Message.Types.BodyGameMessage) body_ : null; }
      set {
        body_ = value;
        bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.Game;
      }
    }

    /// <summary>Field number for the "queue_prefs" field.</summary>
    public const int QueuePrefsFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Message.Types.BodyQueuePreferences QueuePrefs {
      get { return bodyCase_ == BodyOneofCase.QueuePrefs ? (global::Protocol.Message.Types.BodyQueuePreferences) body_ : null; }
      set {
        body_ = value;
        bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.QueuePrefs;
      }
    }

    private object body_;
    /// <summary>Enum of possible cases for the "body" oneof.</summary>
    public enum BodyOneofCase {
      None = 0,
      Error = 4,
      Hello = 5,
      Game = 6,
      QueuePrefs = 7,
    }
    private BodyOneofCase bodyCase_ = BodyOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BodyOneofCase BodyCase {
      get { return bodyCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBody() {
      bodyCase_ = BodyOneofCase.None;
      body_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Head != other.Head) return false;
      if (Status != other.Status) return false;
      if (Error != other.Error) return false;
      if (!object.Equals(Hello, other.Hello)) return false;
      if (!object.Equals(Game, other.Game)) return false;
      if (!object.Equals(QueuePrefs, other.QueuePrefs)) return false;
      if (BodyCase != other.BodyCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain != 0) hash ^= Domain.GetHashCode();
      if (Head != 0) hash ^= Head.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (bodyCase_ == BodyOneofCase.Error) hash ^= Error.GetHashCode();
      if (bodyCase_ == BodyOneofCase.Hello) hash ^= Hello.GetHashCode();
      if (bodyCase_ == BodyOneofCase.Game) hash ^= Game.GetHashCode();
      if (bodyCase_ == BodyOneofCase.QueuePrefs) hash ^= QueuePrefs.GetHashCode();
      hash ^= (int) bodyCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Domain);
      }
      if (Head != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Head);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Status);
      }
      if (bodyCase_ == BodyOneofCase.Error) {
        output.WriteRawTag(34);
        output.WriteString(Error);
      }
      if (bodyCase_ == BodyOneofCase.Hello) {
        output.WriteRawTag(42);
        output.WriteMessage(Hello);
      }
      if (bodyCase_ == BodyOneofCase.Game) {
        output.WriteRawTag(50);
        output.WriteMessage(Game);
      }
      if (bodyCase_ == BodyOneofCase.QueuePrefs) {
        output.WriteRawTag(58);
        output.WriteMessage(QueuePrefs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Domain);
      }
      if (Head != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Head);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (bodyCase_ == BodyOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (bodyCase_ == BodyOneofCase.Hello) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hello);
      }
      if (bodyCase_ == BodyOneofCase.Game) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game);
      }
      if (bodyCase_ == BodyOneofCase.QueuePrefs) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueuePrefs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Domain != 0) {
        Domain = other.Domain;
      }
      if (other.Head != 0) {
        Head = other.Head;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      switch (other.BodyCase) {
        case BodyOneofCase.Error:
          Error = other.Error;
          break;
        case BodyOneofCase.Hello:
          if (Hello == null) {
            Hello = new global::Protocol.Message.Types.BodyHello();
          }
          Hello.MergeFrom(other.Hello);
          break;
        case BodyOneofCase.Game:
          if (Game == null) {
            Game = new global::Protocol.Message.Types.BodyGameMessage();
          }
          Game.MergeFrom(other.Game);
          break;
        case BodyOneofCase.QueuePrefs:
          if (QueuePrefs == null) {
            QueuePrefs = new global::Protocol.Message.Types.BodyQueuePreferences();
          }
          QueuePrefs.MergeFrom(other.QueuePrefs);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            domain_ = (global::Protocol.Message.Types.Domain) input.ReadEnum();
            break;
          }
          case 16: {
            head_ = (global::Protocol.Message.Types.Head) input.ReadEnum();
            break;
          }
          case 26: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            Error = input.ReadString();
            break;
          }
          case 42: {
            global::Protocol.Message.Types.BodyHello subBuilder = new global::Protocol.Message.Types.BodyHello();
            if (bodyCase_ == BodyOneofCase.Hello) {
              subBuilder.MergeFrom(Hello);
            }
            input.ReadMessage(subBuilder);
            Hello = subBuilder;
            break;
          }
          case 50: {
            global::Protocol.Message.Types.BodyGameMessage subBuilder = new global::Protocol.Message.Types.BodyGameMessage();
            if (bodyCase_ == BodyOneofCase.Game) {
              subBuilder.MergeFrom(Game);
            }
            input.ReadMessage(subBuilder);
            Game = subBuilder;
            break;
          }
          case 58: {
            global::Protocol.Message.Types.BodyQueuePreferences subBuilder = new global::Protocol.Message.Types.BodyQueuePreferences();
            if (bodyCase_ == BodyOneofCase.QueuePrefs) {
              subBuilder.MergeFrom(QueuePrefs);
            }
            input.ReadMessage(subBuilder);
            QueuePrefs = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Message message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Domain {
        [pbr::OriginalName("LOBBY")] Lobby = 0,
        [pbr::OriginalName("GAME")] Game = 1,
      }

      public enum Head {
        /// <summary>
        ///[SERVER] Base server messages
        /// </summary>
        [pbr::OriginalName("SRV_HELLO")] SrvHello = 0,
        [pbr::OriginalName("SRV_ERROR")] SrvError = 1,
        /// <summary>
        ///[SERVER] Queue message
        /// </summary>
        [pbr::OriginalName("SRV_QUEUE_STARTED")] SrvQueueStarted = 2,
        [pbr::OriginalName("SRV_QUEUE_STOPPED")] SrvQueueStopped = 3,
        [pbr::OriginalName("SRV_QUEUE_GAME_CREATED")] SrvQueueGameCreated = 4,
        /// <summary>
        ///[SERVER] Game messages
        /// </summary>
        [pbr::OriginalName("SRV_GAME_BEGIN")] SrvGameBegin = 5,
        [pbr::OriginalName("SRV_GAME_END")] SrvGameEnd = 6,
        [pbr::OriginalName("SRV_GAME_PLAYER_LEFT")] SrvGamePlayerLeft = 7,
        [pbr::OriginalName("SRV_GAME_TURN")] SrvGameTurn = 8,
        /// <summary>
        /// redirect player action
        /// </summary>
        [pbr::OriginalName("SRV_GAME_ACTION")] SrvGameAction = 9,
        [pbr::OriginalName("SRV_GAME_EFFECT")] SrvGameEffect = 10,
        /// <summary>
        ///[CLIENT] Messages
        /// </summary>
        [pbr::OriginalName("CLI_QUEUE_START")] CliQueueStart = 11,
        [pbr::OriginalName("CLI_QUEUE_STOP")] CliQueueStop = 12,
        [pbr::OriginalName("CLI_GAME_ACTION")] CliGameAction = 13,
      }

      public enum Side {
        [pbr::OriginalName("NEUTRAL")] Neutral = 0,
        [pbr::OriginalName("A")] A = 1,
        [pbr::OriginalName("B")] B = 2,
      }

      public enum PlayerAction {
        [pbr::OriginalName("PLAY_CARD")] PlayCard = 0,
        [pbr::OriginalName("FIRE_WEAPON")] FireWeapon = 1,
        [pbr::OriginalName("END_TURN")] EndTurn = 2,
      }

      public sealed partial class BuffState : pb::IMessage<BuffState> {
        private static readonly pb::MessageParser<BuffState> _parser = new pb::MessageParser<BuffState>(() => new BuffState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BuffState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Message.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffState(BuffState other) : this() {
          game_ = other.game_;
          duration_ = other.duration_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffState Clone() {
          return new BuffState(this);
        }

        /// <summary>Field number for the "game" field.</summary>
        public const int GameFieldNumber = 1;
        private string game_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Game {
          get { return game_; }
          set {
            game_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "duration" field.</summary>
        public const int DurationFieldNumber = 2;
        private int duration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Duration {
          get { return duration_; }
          set {
            duration_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BuffState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BuffState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Game != other.Game) return false;
          if (Duration != other.Duration) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Game.Length != 0) hash ^= Game.GetHashCode();
          if (Duration != 0) hash ^= Duration.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Game.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Game);
          }
          if (Duration != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Duration);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Game.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Game);
          }
          if (Duration != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BuffState other) {
          if (other == null) {
            return;
          }
          if (other.Game.Length != 0) {
            Game = other.Game;
          }
          if (other.Duration != 0) {
            Duration = other.Duration;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Game = input.ReadString();
                break;
              }
              case 16: {
                Duration = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CardState : pb::IMessage<CardState> {
        private static readonly pb::MessageParser<CardState> _parser = new pb::MessageParser<CardState>(() => new CardState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Message.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardState(CardState other) : this() {
          name_ = other.name_;
          costOffense_ = other.costOffense_;
          costDefense_ = other.costDefense_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardState Clone() {
          return new CardState(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "cost_offense" field.</summary>
        public const int CostOffenseFieldNumber = 2;
        private int costOffense_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CostOffense {
          get { return costOffense_; }
          set {
            costOffense_ = value;
          }
        }

        /// <summary>Field number for the "cost_defense" field.</summary>
        public const int CostDefenseFieldNumber = 3;
        private int costDefense_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CostDefense {
          get { return costDefense_; }
          set {
            costDefense_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (CostOffense != other.CostOffense) return false;
          if (CostDefense != other.CostDefense) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (CostOffense != 0) hash ^= CostOffense.GetHashCode();
          if (CostDefense != 0) hash ^= CostDefense.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (CostOffense != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(CostOffense);
          }
          if (CostDefense != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(CostDefense);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (CostOffense != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostOffense);
          }
          if (CostDefense != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostDefense);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardState other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.CostOffense != 0) {
            CostOffense = other.CostOffense;
          }
          if (other.CostDefense != 0) {
            CostDefense = other.CostDefense;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                CostOffense = input.ReadInt32();
                break;
              }
              case 24: {
                CostDefense = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class EntityState : pb::IMessage<EntityState> {
        private static readonly pb::MessageParser<EntityState> _parser = new pb::MessageParser<EntityState>(() => new EntityState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EntityState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Message.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EntityState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EntityState(EntityState other) : this() {
          id_ = other.id_;
          name_ = other.name_;
          side_ = other.side_;
          hp_ = other.hp_;
          energy_ = other.energy_;
          maxEnergy_ = other.maxEnergy_;
          energyGain_ = other.energyGain_;
          muted_ = other.muted_;
          armed_ = other.armed_;
          locked_ = other.locked_;
          damageMod_ = other.damageMod_;
          buffable_ = other.buffable_;
          isPlayer_ = other.isPlayer_;
          position_ = other.position_;
          buffs_ = other.buffs_.Clone();
          weaponName_ = other.weaponName_;
          shipName_ = other.shipName_;
          handCards_ = other.handCards_;
          deckCards_ = other.deckCards_;
          hand_ = other.hand_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EntityState Clone() {
          return new EntityState(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "side" field.</summary>
        public const int SideFieldNumber = 3;
        private global::Protocol.Message.Types.Side side_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Message.Types.Side Side {
          get { return side_; }
          set {
            side_ = value;
          }
        }

        /// <summary>Field number for the "hp" field.</summary>
        public const int HpFieldNumber = 4;
        private int hp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Hp {
          get { return hp_; }
          set {
            hp_ = value;
          }
        }

        /// <summary>Field number for the "energy" field.</summary>
        public const int EnergyFieldNumber = 5;
        private int energy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Energy {
          get { return energy_; }
          set {
            energy_ = value;
          }
        }

        /// <summary>Field number for the "max_energy" field.</summary>
        public const int MaxEnergyFieldNumber = 6;
        private int maxEnergy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxEnergy {
          get { return maxEnergy_; }
          set {
            maxEnergy_ = value;
          }
        }

        /// <summary>Field number for the "energy_gain" field.</summary>
        public const int EnergyGainFieldNumber = 7;
        private int energyGain_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EnergyGain {
          get { return energyGain_; }
          set {
            energyGain_ = value;
          }
        }

        /// <summary>Field number for the "muted" field.</summary>
        public const int MutedFieldNumber = 8;
        private bool muted_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Muted {
          get { return muted_; }
          set {
            muted_ = value;
          }
        }

        /// <summary>Field number for the "armed" field.</summary>
        public const int ArmedFieldNumber = 9;
        private bool armed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Armed {
          get { return armed_; }
          set {
            armed_ = value;
          }
        }

        /// <summary>Field number for the "locked" field.</summary>
        public const int LockedFieldNumber = 10;
        private bool locked_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Locked {
          get { return locked_; }
          set {
            locked_ = value;
          }
        }

        /// <summary>Field number for the "damage_mod" field.</summary>
        public const int DamageModFieldNumber = 11;
        private int damageMod_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DamageMod {
          get { return damageMod_; }
          set {
            damageMod_ = value;
          }
        }

        /// <summary>Field number for the "buffable" field.</summary>
        public const int BuffableFieldNumber = 12;
        private bool buffable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Buffable {
          get { return buffable_; }
          set {
            buffable_ = value;
          }
        }

        /// <summary>Field number for the "is_player" field.</summary>
        public const int IsPlayerFieldNumber = 13;
        private bool isPlayer_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsPlayer {
          get { return isPlayer_; }
          set {
            isPlayer_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 14;
        private int position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        /// <summary>Field number for the "buffs" field.</summary>
        public const int BuffsFieldNumber = 15;
        private static readonly pb::FieldCodec<global::Protocol.Message.Types.BuffState> _repeated_buffs_codec
            = pb::FieldCodec.ForMessage(122, global::Protocol.Message.Types.BuffState.Parser);
        private readonly pbc::RepeatedField<global::Protocol.Message.Types.BuffState> buffs_ = new pbc::RepeatedField<global::Protocol.Message.Types.BuffState>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Protocol.Message.Types.BuffState> Buffs {
          get { return buffs_; }
        }

        /// <summary>Field number for the "weapon_name" field.</summary>
        public const int WeaponNameFieldNumber = 16;
        private string weaponName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string WeaponName {
          get { return weaponName_; }
          set {
            weaponName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ship_name" field.</summary>
        public const int ShipNameFieldNumber = 17;
        private string shipName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ShipName {
          get { return shipName_; }
          set {
            shipName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "hand_cards" field.</summary>
        public const int HandCardsFieldNumber = 18;
        private int handCards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HandCards {
          get { return handCards_; }
          set {
            handCards_ = value;
          }
        }

        /// <summary>Field number for the "deck_cards" field.</summary>
        public const int DeckCardsFieldNumber = 19;
        private int deckCards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DeckCards {
          get { return deckCards_; }
          set {
            deckCards_ = value;
          }
        }

        /// <summary>Field number for the "hand" field.</summary>
        public const int HandFieldNumber = 20;
        private static readonly pb::FieldCodec<global::Protocol.Message.Types.CardState> _repeated_hand_codec
            = pb::FieldCodec.ForMessage(162, global::Protocol.Message.Types.CardState.Parser);
        private readonly pbc::RepeatedField<global::Protocol.Message.Types.CardState> hand_ = new pbc::RepeatedField<global::Protocol.Message.Types.CardState>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Protocol.Message.Types.CardState> Hand {
          get { return hand_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EntityState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EntityState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (Side != other.Side) return false;
          if (Hp != other.Hp) return false;
          if (Energy != other.Energy) return false;
          if (MaxEnergy != other.MaxEnergy) return false;
          if (EnergyGain != other.EnergyGain) return false;
          if (Muted != other.Muted) return false;
          if (Armed != other.Armed) return false;
          if (Locked != other.Locked) return false;
          if (DamageMod != other.DamageMod) return false;
          if (Buffable != other.Buffable) return false;
          if (IsPlayer != other.IsPlayer) return false;
          if (Position != other.Position) return false;
          if(!buffs_.Equals(other.buffs_)) return false;
          if (WeaponName != other.WeaponName) return false;
          if (ShipName != other.ShipName) return false;
          if (HandCards != other.HandCards) return false;
          if (DeckCards != other.DeckCards) return false;
          if(!hand_.Equals(other.hand_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Side != 0) hash ^= Side.GetHashCode();
          if (Hp != 0) hash ^= Hp.GetHashCode();
          if (Energy != 0) hash ^= Energy.GetHashCode();
          if (MaxEnergy != 0) hash ^= MaxEnergy.GetHashCode();
          if (EnergyGain != 0) hash ^= EnergyGain.GetHashCode();
          if (Muted != false) hash ^= Muted.GetHashCode();
          if (Armed != false) hash ^= Armed.GetHashCode();
          if (Locked != false) hash ^= Locked.GetHashCode();
          if (DamageMod != 0) hash ^= DamageMod.GetHashCode();
          if (Buffable != false) hash ^= Buffable.GetHashCode();
          if (IsPlayer != false) hash ^= IsPlayer.GetHashCode();
          if (Position != 0) hash ^= Position.GetHashCode();
          hash ^= buffs_.GetHashCode();
          if (WeaponName.Length != 0) hash ^= WeaponName.GetHashCode();
          if (ShipName.Length != 0) hash ^= ShipName.GetHashCode();
          if (HandCards != 0) hash ^= HandCards.GetHashCode();
          if (DeckCards != 0) hash ^= DeckCards.GetHashCode();
          hash ^= hand_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Side != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Side);
          }
          if (Hp != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Hp);
          }
          if (Energy != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Energy);
          }
          if (MaxEnergy != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(MaxEnergy);
          }
          if (EnergyGain != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(EnergyGain);
          }
          if (Muted != false) {
            output.WriteRawTag(64);
            output.WriteBool(Muted);
          }
          if (Armed != false) {
            output.WriteRawTag(72);
            output.WriteBool(Armed);
          }
          if (Locked != false) {
            output.WriteRawTag(80);
            output.WriteBool(Locked);
          }
          if (DamageMod != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(DamageMod);
          }
          if (Buffable != false) {
            output.WriteRawTag(96);
            output.WriteBool(Buffable);
          }
          if (IsPlayer != false) {
            output.WriteRawTag(104);
            output.WriteBool(IsPlayer);
          }
          if (Position != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(Position);
          }
          buffs_.WriteTo(output, _repeated_buffs_codec);
          if (WeaponName.Length != 0) {
            output.WriteRawTag(130, 1);
            output.WriteString(WeaponName);
          }
          if (ShipName.Length != 0) {
            output.WriteRawTag(138, 1);
            output.WriteString(ShipName);
          }
          if (HandCards != 0) {
            output.WriteRawTag(144, 1);
            output.WriteInt32(HandCards);
          }
          if (DeckCards != 0) {
            output.WriteRawTag(152, 1);
            output.WriteInt32(DeckCards);
          }
          hand_.WriteTo(output, _repeated_hand_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Side != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
          }
          if (Hp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
          }
          if (Energy != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
          }
          if (MaxEnergy != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxEnergy);
          }
          if (EnergyGain != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnergyGain);
          }
          if (Muted != false) {
            size += 1 + 1;
          }
          if (Armed != false) {
            size += 1 + 1;
          }
          if (Locked != false) {
            size += 1 + 1;
          }
          if (DamageMod != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageMod);
          }
          if (Buffable != false) {
            size += 1 + 1;
          }
          if (IsPlayer != false) {
            size += 1 + 1;
          }
          if (Position != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
          }
          size += buffs_.CalculateSize(_repeated_buffs_codec);
          if (WeaponName.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(WeaponName);
          }
          if (ShipName.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ShipName);
          }
          if (HandCards != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(HandCards);
          }
          if (DeckCards != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeckCards);
          }
          size += hand_.CalculateSize(_repeated_hand_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EntityState other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Side != 0) {
            Side = other.Side;
          }
          if (other.Hp != 0) {
            Hp = other.Hp;
          }
          if (other.Energy != 0) {
            Energy = other.Energy;
          }
          if (other.MaxEnergy != 0) {
            MaxEnergy = other.MaxEnergy;
          }
          if (other.EnergyGain != 0) {
            EnergyGain = other.EnergyGain;
          }
          if (other.Muted != false) {
            Muted = other.Muted;
          }
          if (other.Armed != false) {
            Armed = other.Armed;
          }
          if (other.Locked != false) {
            Locked = other.Locked;
          }
          if (other.DamageMod != 0) {
            DamageMod = other.DamageMod;
          }
          if (other.Buffable != false) {
            Buffable = other.Buffable;
          }
          if (other.IsPlayer != false) {
            IsPlayer = other.IsPlayer;
          }
          if (other.Position != 0) {
            Position = other.Position;
          }
          buffs_.Add(other.buffs_);
          if (other.WeaponName.Length != 0) {
            WeaponName = other.WeaponName;
          }
          if (other.ShipName.Length != 0) {
            ShipName = other.ShipName;
          }
          if (other.HandCards != 0) {
            HandCards = other.HandCards;
          }
          if (other.DeckCards != 0) {
            DeckCards = other.DeckCards;
          }
          hand_.Add(other.hand_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 24: {
                side_ = (global::Protocol.Message.Types.Side) input.ReadEnum();
                break;
              }
              case 32: {
                Hp = input.ReadInt32();
                break;
              }
              case 40: {
                Energy = input.ReadInt32();
                break;
              }
              case 48: {
                MaxEnergy = input.ReadInt32();
                break;
              }
              case 56: {
                EnergyGain = input.ReadInt32();
                break;
              }
              case 64: {
                Muted = input.ReadBool();
                break;
              }
              case 72: {
                Armed = input.ReadBool();
                break;
              }
              case 80: {
                Locked = input.ReadBool();
                break;
              }
              case 88: {
                DamageMod = input.ReadInt32();
                break;
              }
              case 96: {
                Buffable = input.ReadBool();
                break;
              }
              case 104: {
                IsPlayer = input.ReadBool();
                break;
              }
              case 112: {
                Position = input.ReadInt32();
                break;
              }
              case 122: {
                buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
                break;
              }
              case 130: {
                WeaponName = input.ReadString();
                break;
              }
              case 138: {
                ShipName = input.ReadString();
                break;
              }
              case 144: {
                HandCards = input.ReadInt32();
                break;
              }
              case 152: {
                DeckCards = input.ReadInt32();
                break;
              }
              case 162: {
                hand_.AddEntriesFrom(input, _repeated_hand_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class GameState : pb::IMessage<GameState> {
        private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Message.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameState(GameState other) : this() {
          id_ = other.id_;
          turn_ = other.turn_;
          objects_ = other.objects_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameState Clone() {
          return new GameState(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "turn" field.</summary>
        public const int TurnFieldNumber = 2;
        private global::Protocol.Message.Types.Side turn_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Message.Types.Side Turn {
          get { return turn_; }
          set {
            turn_ = value;
          }
        }

        /// <summary>Field number for the "objects" field.</summary>
        public const int ObjectsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Protocol.Message.Types.EntityState> _repeated_objects_codec
            = pb::FieldCodec.ForMessage(26, global::Protocol.Message.Types.EntityState.Parser);
        private readonly pbc::RepeatedField<global::Protocol.Message.Types.EntityState> objects_ = new pbc::RepeatedField<global::Protocol.Message.Types.EntityState>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Protocol.Message.Types.EntityState> Objects {
          get { return objects_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GameState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Turn != other.Turn) return false;
          if(!objects_.Equals(other.objects_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Turn != 0) hash ^= Turn.GetHashCode();
          hash ^= objects_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Turn != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Turn);
          }
          objects_.WriteTo(output, _repeated_objects_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Turn != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Turn);
          }
          size += objects_.CalculateSize(_repeated_objects_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameState other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Turn != 0) {
            Turn = other.Turn;
          }
          objects_.Add(other.objects_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                turn_ = (global::Protocol.Message.Types.Side) input.ReadEnum();
                break;
              }
              case 26: {
                objects_.AddEntriesFrom(input, _repeated_objects_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class BodyAction : pb::IMessage<BodyAction> {
        private static readonly pb::MessageParser<BodyAction> _parser = new pb::MessageParser<BodyAction>(() => new BodyAction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BodyAction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Message.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyAction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyAction(BodyAction other) : this() {
          action_ = other.action_;
          card_ = other.card_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyAction Clone() {
          return new BodyAction(this);
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 1;
        private global::Protocol.Message.Types.PlayerAction action_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Message.Types.PlayerAction Action {
          get { return action_; }
          set {
            action_ = value;
          }
        }

        /// <summary>Field number for the "card" field.</summary>
        public const int CardFieldNumber = 2;
        private string card_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Card {
          get { return card_; }
          set {
            card_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BodyAction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BodyAction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Action != other.Action) return false;
          if (Card != other.Card) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Action != 0) hash ^= Action.GetHashCode();
          if (Card.Length != 0) hash ^= Card.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Action != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Action);
          }
          if (Card.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Card);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Action != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
          }
          if (Card.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Card);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BodyAction other) {
          if (other == null) {
            return;
          }
          if (other.Action != 0) {
            Action = other.Action;
          }
          if (other.Card.Length != 0) {
            Card = other.Card;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                action_ = (global::Protocol.Message.Types.PlayerAction) input.ReadEnum();
                break;
              }
              case 18: {
                Card = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BodyEffect : pb::IMessage<BodyEffect> {
        private static readonly pb::MessageParser<BodyEffect> _parser = new pb::MessageParser<BodyEffect>(() => new BodyEffect());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BodyEffect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Message.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyEffect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyEffect(BodyEffect other) : this() {
          sourceEntity_ = other.sourceEntity_;
          targetEntity_ = other.targetEntity_;
          Action = other.action_ != null ? other.Action.Clone() : null;
          effectName_ = other.effectName_;
          Arguments = other.arguments_ != null ? other.Arguments.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyEffect Clone() {
          return new BodyEffect(this);
        }

        /// <summary>Field number for the "source_entity" field.</summary>
        public const int SourceEntityFieldNumber = 1;
        private int sourceEntity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SourceEntity {
          get { return sourceEntity_; }
          set {
            sourceEntity_ = value;
          }
        }

        /// <summary>Field number for the "target_entity" field.</summary>
        public const int TargetEntityFieldNumber = 2;
        private int targetEntity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TargetEntity {
          get { return targetEntity_; }
          set {
            targetEntity_ = value;
          }
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 3;
        private global::Protocol.Message.Types.BodyAction action_;
        /// <summary>
        /// Client action
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Message.Types.BodyAction Action {
          get { return action_; }
          set {
            action_ = value;
          }
        }

        /// <summary>Field number for the "effect_name" field.</summary>
        public const int EffectNameFieldNumber = 4;
        private string effectName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EffectName {
          get { return effectName_; }
          set {
            effectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "arguments" field.</summary>
        public const int ArgumentsFieldNumber = 5;
        private global::Google.Protobuf.WellKnownTypes.Struct arguments_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Struct Arguments {
          get { return arguments_; }
          set {
            arguments_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BodyEffect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BodyEffect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SourceEntity != other.SourceEntity) return false;
          if (TargetEntity != other.TargetEntity) return false;
          if (!object.Equals(Action, other.Action)) return false;
          if (EffectName != other.EffectName) return false;
          if (!object.Equals(Arguments, other.Arguments)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SourceEntity != 0) hash ^= SourceEntity.GetHashCode();
          if (TargetEntity != 0) hash ^= TargetEntity.GetHashCode();
          if (action_ != null) hash ^= Action.GetHashCode();
          if (EffectName.Length != 0) hash ^= EffectName.GetHashCode();
          if (arguments_ != null) hash ^= Arguments.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SourceEntity != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(SourceEntity);
          }
          if (TargetEntity != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(TargetEntity);
          }
          if (action_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Action);
          }
          if (EffectName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(EffectName);
          }
          if (arguments_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Arguments);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SourceEntity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceEntity);
          }
          if (TargetEntity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntity);
          }
          if (action_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
          }
          if (EffectName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectName);
          }
          if (arguments_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arguments);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BodyEffect other) {
          if (other == null) {
            return;
          }
          if (other.SourceEntity != 0) {
            SourceEntity = other.SourceEntity;
          }
          if (other.TargetEntity != 0) {
            TargetEntity = other.TargetEntity;
          }
          if (other.action_ != null) {
            if (action_ == null) {
              action_ = new global::Protocol.Message.Types.BodyAction();
            }
            Action.MergeFrom(other.Action);
          }
          if (other.EffectName.Length != 0) {
            EffectName = other.EffectName;
          }
          if (other.arguments_ != null) {
            if (arguments_ == null) {
              arguments_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            Arguments.MergeFrom(other.Arguments);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SourceEntity = input.ReadInt32();
                break;
              }
              case 16: {
                TargetEntity = input.ReadInt32();
                break;
              }
              case 26: {
                if (action_ == null) {
                  action_ = new global::Protocol.Message.Types.BodyAction();
                }
                input.ReadMessage(action_);
                break;
              }
              case 34: {
                EffectName = input.ReadString();
                break;
              }
              case 42: {
                if (arguments_ == null) {
                  arguments_ = new global::Google.Protobuf.WellKnownTypes.Struct();
                }
                input.ReadMessage(arguments_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class BodyHello : pb::IMessage<BodyHello> {
        private static readonly pb::MessageParser<BodyHello> _parser = new pb::MessageParser<BodyHello>(() => new BodyHello());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BodyHello> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Message.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyHello() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyHello(BodyHello other) : this() {
          version_ = other.version_;
          players_ = other.players_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyHello Clone() {
          return new BodyHello(this);
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 1;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version {
          get { return version_; }
          set {
            version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 2;
        private int players_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Players {
          get { return players_; }
          set {
            players_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BodyHello);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BodyHello other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Version != other.Version) return false;
          if (Players != other.Players) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Version.Length != 0) hash ^= Version.GetHashCode();
          if (Players != 0) hash ^= Players.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Version.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Version);
          }
          if (Players != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Players);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Version.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
          }
          if (Players != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Players);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BodyHello other) {
          if (other == null) {
            return;
          }
          if (other.Version.Length != 0) {
            Version = other.Version;
          }
          if (other.Players != 0) {
            Players = other.Players;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Version = input.ReadString();
                break;
              }
              case 16: {
                Players = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BodyGameMessage : pb::IMessage<BodyGameMessage> {
        private static readonly pb::MessageParser<BodyGameMessage> _parser = new pb::MessageParser<BodyGameMessage>(() => new BodyGameMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BodyGameMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Message.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyGameMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyGameMessage(BodyGameMessage other) : this() {
          gameId_ = other.gameId_;
          State = other.state_ != null ? other.State.Clone() : null;
          switch (other.PayloadCase) {
            case PayloadOneofCase.Action:
              Action = other.Action.Clone();
              break;
            case PayloadOneofCase.Effect:
              Effect = other.Effect.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyGameMessage Clone() {
          return new BodyGameMessage(this);
        }

        /// <summary>Field number for the "game_id" field.</summary>
        public const int GameIdFieldNumber = 1;
        private string gameId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameId {
          get { return gameId_; }
          set {
            gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 2;
        private global::Protocol.Message.Types.GameState state_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Message.Types.GameState State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 3;
        /// <summary>
        /// Client action
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Message.Types.BodyAction Action {
          get { return payloadCase_ == PayloadOneofCase.Action ? (global::Protocol.Message.Types.BodyAction) payload_ : null; }
          set {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Action;
          }
        }

        /// <summary>Field number for the "effect" field.</summary>
        public const int EffectFieldNumber = 4;
        /// <summary>
        /// Server response (game state changers)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Message.Types.BodyEffect Effect {
          get { return payloadCase_ == PayloadOneofCase.Effect ? (global::Protocol.Message.Types.BodyEffect) payload_ : null; }
          set {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Effect;
          }
        }

        private object payload_;
        /// <summary>Enum of possible cases for the "payload" oneof.</summary>
        public enum PayloadOneofCase {
          None = 0,
          Action = 3,
          Effect = 4,
        }
        private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PayloadOneofCase PayloadCase {
          get { return payloadCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPayload() {
          payloadCase_ = PayloadOneofCase.None;
          payload_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BodyGameMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BodyGameMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GameId != other.GameId) return false;
          if (!object.Equals(State, other.State)) return false;
          if (!object.Equals(Action, other.Action)) return false;
          if (!object.Equals(Effect, other.Effect)) return false;
          if (PayloadCase != other.PayloadCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GameId.Length != 0) hash ^= GameId.GetHashCode();
          if (state_ != null) hash ^= State.GetHashCode();
          if (payloadCase_ == PayloadOneofCase.Action) hash ^= Action.GetHashCode();
          if (payloadCase_ == PayloadOneofCase.Effect) hash ^= Effect.GetHashCode();
          hash ^= (int) payloadCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GameId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(GameId);
          }
          if (state_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(State);
          }
          if (payloadCase_ == PayloadOneofCase.Action) {
            output.WriteRawTag(26);
            output.WriteMessage(Action);
          }
          if (payloadCase_ == PayloadOneofCase.Effect) {
            output.WriteRawTag(34);
            output.WriteMessage(Effect);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GameId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
          }
          if (state_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
          }
          if (payloadCase_ == PayloadOneofCase.Action) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
          }
          if (payloadCase_ == PayloadOneofCase.Effect) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Effect);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BodyGameMessage other) {
          if (other == null) {
            return;
          }
          if (other.GameId.Length != 0) {
            GameId = other.GameId;
          }
          if (other.state_ != null) {
            if (state_ == null) {
              state_ = new global::Protocol.Message.Types.GameState();
            }
            State.MergeFrom(other.State);
          }
          switch (other.PayloadCase) {
            case PayloadOneofCase.Action:
              if (Action == null) {
                Action = new global::Protocol.Message.Types.BodyAction();
              }
              Action.MergeFrom(other.Action);
              break;
            case PayloadOneofCase.Effect:
              if (Effect == null) {
                Effect = new global::Protocol.Message.Types.BodyEffect();
              }
              Effect.MergeFrom(other.Effect);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                GameId = input.ReadString();
                break;
              }
              case 18: {
                if (state_ == null) {
                  state_ = new global::Protocol.Message.Types.GameState();
                }
                input.ReadMessage(state_);
                break;
              }
              case 26: {
                global::Protocol.Message.Types.BodyAction subBuilder = new global::Protocol.Message.Types.BodyAction();
                if (payloadCase_ == PayloadOneofCase.Action) {
                  subBuilder.MergeFrom(Action);
                }
                input.ReadMessage(subBuilder);
                Action = subBuilder;
                break;
              }
              case 34: {
                global::Protocol.Message.Types.BodyEffect subBuilder = new global::Protocol.Message.Types.BodyEffect();
                if (payloadCase_ == PayloadOneofCase.Effect) {
                  subBuilder.MergeFrom(Effect);
                }
                input.ReadMessage(subBuilder);
                Effect = subBuilder;
                break;
              }
            }
          }
        }

      }

      public sealed partial class BodyQueuePreferences : pb::IMessage<BodyQueuePreferences> {
        private static readonly pb::MessageParser<BodyQueuePreferences> _parser = new pb::MessageParser<BodyQueuePreferences>(() => new BodyQueuePreferences());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BodyQueuePreferences> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Message.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyQueuePreferences() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyQueuePreferences(BodyQueuePreferences other) : this() {
          ship_ = other.ship_;
          weapon_ = other.weapon_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyQueuePreferences Clone() {
          return new BodyQueuePreferences(this);
        }

        /// <summary>Field number for the "ship" field.</summary>
        public const int ShipFieldNumber = 1;
        private string ship_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Ship {
          get { return ship_; }
          set {
            ship_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "weapon" field.</summary>
        public const int WeaponFieldNumber = 2;
        private string weapon_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Weapon {
          get { return weapon_; }
          set {
            weapon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BodyQueuePreferences);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BodyQueuePreferences other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Ship != other.Ship) return false;
          if (Weapon != other.Weapon) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Ship.Length != 0) hash ^= Ship.GetHashCode();
          if (Weapon.Length != 0) hash ^= Weapon.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Ship.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Ship);
          }
          if (Weapon.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Weapon);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Ship.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Ship);
          }
          if (Weapon.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Weapon);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BodyQueuePreferences other) {
          if (other == null) {
            return;
          }
          if (other.Ship.Length != 0) {
            Ship = other.Ship;
          }
          if (other.Weapon.Length != 0) {
            Weapon = other.Weapon;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Ship = input.ReadString();
                break;
              }
              case 18: {
                Weapon = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
